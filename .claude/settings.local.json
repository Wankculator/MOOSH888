{
  "permissions": {
    "allow": [
      "Bash(grep:*)",
      "Bash(cd:*)",
      "Bash(curl:*)",
      "Bash(pkill:*)",
      "Bash(taskkill:*)",
      "Bash(true)",
      "Bash(killall:*)",
      "Bash(ls:*)",
      "Bash(wget:*)",
      "Bash(iconv:*)",
      "Bash(cp:*)",
      "Bash(node:*)",
      "Bash(mv:*)",
      "Bash(rm:*)",
      "Bash(git add:*)",
      "Bash(git rm:*)",
      "Bash(git commit:*)",
      "Bash(git config:*)",
      "Bash(git push:*)",
      "Bash(chmod:*)",
      "WebFetch(domain:github.com)",
      "Bash(./push_to_github.sh)",
      "Bash(bash:*)",
      "Bash(timeout:*)",
      "Bash(DEBUG=*)",
      "Bash(sed:*)",
      "Bash(perl:*)",
      "Bash(mkdir:*)",
      "Bash(rg:*)",
      "Bash(git checkout:*)",
      "Bash(awk:*)",
      "WebFetch(domain:localhost)",
      "Bash(npm install:*)",
      "Bash(npm search:*)",
      "Bash(npm config get:*)",
      "Bash(git ls-tree:*)",
      "Bash(find:*)",
      "Bash(cat:*)",
      "Bash(tree:*)",
      "Bash(touch:*)",
      "Bash(echo:*)",
      "Bash(git fetch:*)",
      "WebFetch(domain:www.spark.money)",
      "Bash(npm:*)",
      "WebFetch(domain:sparksat.app)",
      "Bash(where node)",
      "Bash(kill:*)",
      "Bash(python3:*)",
      "Bash(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:3038)",
      "Bash(claude --version)",
      "Bash(cmd.exe:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(sudo ln:*)",
      "Bash(ln:*)",
      "WebFetch(domain:docs.cline.bot)",
      "Bash(claude auth status)",
      "Bash(claude auth login)",
      "Bash(start http://localhost:3333)",
      "Bash(ss:*)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "WebFetch(domain:docs.spark.money)",
      "Bash(./show-real-wallet-data.sh:*)",
      "Bash(./prove-seed-derivation.sh:*)",
      "WebFetch(domain:api.github.com)",
      "Bash(explorer.exe http://localhost:3333)",
      "Bash(./test-wallet-complete.sh:*)",
      "Bash(# Test seed phrase consistency\nSEED=\"\"salon decide ordinary hedgehog grace viable harvest ridge estate liar glow smooth festival ketchup surprise mosquito trend drastic review stairs bleak excuse ten coast\"\"\n\necho \"\"Testing Spark address generation consistency...\"\"\necho \"\"\"\"\n\n# Generate Spark from specific seed\nRESULT=$(curl -s -X POST http://localhost:3001/api/spark/generate \\\n  -H \"\"Content-Type: application/json\"\" \\\n  -d \"\"{\\\"\"seedPhrase\\\"\": \\\"\"$SEED\\\"\"}\"\")\n\necho \"\"Test Results:\"\"\necho \"\"$RESULT\"\" | python3 -c \"\"\nimport json, sys\ndata = json.load(sys.stdin)\n\nprint(''Spark Address:'', data.get(''address'', ''ERROR''))\nprint(''Private Key:'', data.get(''privateKey'', ''ERROR'')[:32] + ''...'')\nprint(''Public Key:'', data.get(''publicKey'', ''ERROR'') if ''publicKey'' in data else ''Not provided'')\n\"\"\n\necho \"\"\"\"\necho \"\"Running second test with same seed...\"\"\n\n# Test again with same seed\nRESULT2=$(curl -s -X POST http://localhost:3001/api/spark/generate \\\n  -H \"\"Content-Type: application/json\"\" \\\n  -d \"\"{\\\"\"seedPhrase\\\"\": \\\"\"$SEED\\\"\"}\"\")\n\necho \"\"$RESULT2\"\" | python3 -c \"\"\nimport json, sys\ndata = json.load(sys.stdin)\n\nprint(''Spark Address (2nd run):'', data.get(''address'', ''ERROR''))\nprint(''Private Key (2nd run):'', data.get(''privateKey'', ''ERROR'')[:32] + ''...'')\n\"\"\n\necho \"\"\"\"\necho \"\"Comparing results...\"\"\nif [ \"\"$RESULT\"\" = \"\"$RESULT2\"\" ]; then\n    echo \"\"✅ CONFIRMED: Same seed generates same Spark address!\"\"\nelse\n    echo \"\"❌ ERROR: Different results from same seed\"\"\nfi)",
      "Bash(# Complete test showing the issue\necho \"\"=== COMPLETE WALLET TEST SHOWING SEED PHRASE ISSUE ===\"\"\necho \"\"\"\"\n\n# Test 1: Generate new wallet\necho \"\"1. Generating new wallet...\"\"\nNEW_WALLET=$(curl -s -X POST http://localhost:3001/api/spark/generate-wallet \\\n  -H \"\"Content-Type: application/json\"\" \\\n  -d ''{\"\"strength\"\": 128}'')\n\nMNEMONIC=$(echo \"\"$NEW_WALLET\"\" | python3 -c \"\"import json,sys; print(json.load(sys.stdin)[''data''][''mnemonic''])\"\")\nSPARK_ADDR=$(echo \"\"$NEW_WALLET\"\" | python3 -c \"\"import json,sys; print(json.load(sys.stdin)[''data''][''addresses''][''spark''])\"\")\n\necho \"\"Generated mnemonic: $MNEMONIC\"\"\necho \"\"Generated Spark: $SPARK_ADDR\"\"\necho \"\"\"\"\n\n# Test 2: Import same seed\necho \"\"2. Importing same seed phrase...\"\"\nIMPORT_RESULT=$(curl -s -X POST http://localhost:3001/api/wallet/import \\\n  -H \"\"Content-Type: application/json\"\" \\\n  -d \"\"{\\\"\"mnemonic\\\"\": \\\"\"$MNEMONIC\\\"\", \\\"\"network\\\"\": \\\"\"MAINNET\\\"\"}\"\")\n\nIMPORT_SPARK=$(echo \"\"$IMPORT_RESULT\"\" | python3 -c \"\"import json,sys; d=json.load(sys.stdin); print(d.get(''data'',{}).get(''spark'',{}).get(''address'',''ERROR''))\"\")\n\necho \"\"Imported Spark: $IMPORT_SPARK\"\"\necho \"\"\"\"\n\n# Compare\nif [ \"\"$SPARK_ADDR\"\" = \"\"$IMPORT_SPARK\"\" ]; then\n    echo \"\"✅ MATCH: Same seed generates same Spark address\"\"\nelse\n    echo \"\"❌ MISMATCH: Different Spark addresses from same seed!\"\"\n    echo \"\"   Generated: $SPARK_ADDR\"\"\n    echo \"\"   Imported:  $IMPORT_SPARK\"\"\nfi)",
      "Bash(# Kill existing API server\npkill -f \"\"node.*api-server\"\" || true\n\n# Restart API server with new code\ncd \"\"/mnt/c/Users/sk84l/OneDrive/Desktop/MOOSH WALLET/src/server\"\" && node api-server.js > ../../api-new.log 2>&1 &\n\nsleep 2\n\necho \"\"API server restarted with fixes applied\"\")",
      "Bash(# Complete test of the fixed implementation\necho \"\"=== COMPLETE WALLET TEST WITH ALL FIXES ===\"\"\necho \"\"\"\"\n\n# Test 1: Generate new wallet and check all data\necho \"\"1. Testing wallet generation with new Spark derivation...\"\"\nWALLET_RESPONSE=$(curl -s -X POST http://localhost:3001/api/spark/generate-wallet \\\n  -H \"\"Content-Type: application/json\"\" \\\n  -d ''{\"\"strength\"\": 128}'')\n\necho \"\"$WALLET_RESPONSE\"\" | python3 -c \"\"\nimport json, sys\ndata = json.load(sys.stdin)\n\nif data.get(''success''):\n    wallet = data[''data'']\n    print(''✅ Wallet Generated Successfully!'')\n    print()\n    print(f''Mnemonic: {wallet.get(\\\"\"mnemonic\\\"\", \\\"\"ERROR\\\"\")}'')\n    print()\n    print(''Addresses:'')\n    addrs = wallet.get(''bitcoinAddresses'', {})\n    print(f''  Segwit:  {addrs.get(\\\"\"segwit\\\"\", \\\"\"N/A\\\"\")}'')\n    print(f''  Taproot: {addrs.get(\\\"\"taproot\\\"\", \\\"\"N/A\\\"\")}'')  \n    print(f''  Legacy:  {addrs.get(\\\"\"legacy\\\"\", \\\"\"N/A\\\"\")}'')\n    print(f''  Spark:   {wallet.get(\\\"\"addresses\\\"\", {}).get(\\\"\"spark\\\"\", \\\"\"N/A\\\"\")}'')\n    print()\n    print(''Private Keys Available:'')\n    keys = wallet.get(''allPrivateKeys'', {})\n    print(f''  Segwit:  {\\\"\"hex\\\"\" in keys.get(\\\"\"segwit\\\"\", {})}'')\n    print(f''  Taproot: {\\\"\"hex\\\"\" in keys.get(\\\"\"taproot\\\"\", {})}'')\n    print(f''  Legacy:  {\\\"\"hex\\\"\" in keys.get(\\\"\"legacy\\\"\", {})}'')\n    print(f''  Spark:   {\\\"\"hex\\\"\" in keys.get(\\\"\"spark\\\"\", {})}'')\nelse:\n    print(''Error:'', data)\n\"\"\n\necho \"\"\"\"\necho \"\"2. Testing seed phrase correspondence...\"\"\n\n# Get a specific seed to test\nTEST_SEED=\"\"trade spoil moral attend spread fuel audit broccoli surge mirror frozen avoid\"\"\n\nIMPORT_RESPONSE=$(curl -s -X POST http://localhost:3001/api/wallet/import \\\n  -H \"\"Content-Type: application/json\"\" \\\n  -d \"\"{\\\"\"mnemonic\\\"\": \\\"\"$TEST_SEED\\\"\", \\\"\"network\\\"\": \\\"\"MAINNET\\\"\"}\"\")\n\necho \"\"Import test with seed: $TEST_SEED\"\"\necho \"\"$IMPORT_RESPONSE\"\" | python3 -c \"\"\nimport json, sys\ndata = json.load(sys.stdin)\n\nif data.get(''success''):\n    wallet = data[''data'']\n    print(''✅ Import Successful'')\n    if ''spark'' in wallet:\n        print(f''Spark Address: {wallet[\\\"\"spark\\\"\"].get(\\\"\"address\\\"\", \\\"\"N/A\\\"\")}'')\n        print(f''Spark Path: {wallet[\\\"\"spark\\\"\"].get(\\\"\"path\\\"\", \\\"\"N/A\\\"\")}'')\n\"\")",
      "Bash(# Kill old API server\npkill -f \"\"node.*api-server\"\" || true\nsleep 1\n\n# Start new API server\ncd \"\"/mnt/c/Users/sk84l/OneDrive/Desktop/MOOSH WALLET/src/server\"\" && node api-server.js > ../../api.log 2>&1 &\nsleep 3\n\necho \"\"API server restarted\"\"\n\n# Test it''s working\ncurl -s http://localhost:3001/health | python3 -m json.tool || echo \"\"Not ready yet\"\")",
      "Bash(# Kill and restart API server\npkill -f \"\"node.*api-server\"\" || true\nsleep 1\n\ncd \"\"/mnt/c/Users/sk84l/OneDrive/Desktop/MOOSH WALLET/src/server\"\" && node api-server.js > ../../api.log 2>&1 &\nsleep 3\n\necho \"\"API server restarted with nested segwit support\"\")",
      "Bash(./comprehensive-verification-test.sh:*)",
      "Bash(pgrep:*)",
      "Bash(./cleanup-project.sh:*)",
      "Bash(sudo apt-get:*)",
      "Bash(sudo apt-get install:*)",
      "Bash(time curl:*)",
      "Bash(xdg-open:*)",
      "Bash(cd:*)",
      "Bash(git tag:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(git reset:*)",
      "Bash(explorer.exe http://localhost:3333/test-chart-fixes.html)",
      "Bash(cd:*)"
    ],
    "deny": []
  }
}