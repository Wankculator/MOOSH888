================================================================================
                    REAL SPARK WALLET GENERATION - COMPLETE GUIDE
================================================================================

üéØ OVERVIEW
This guide documents the EXACT process for generating real Spark Protocol wallets 
with complete Bitcoin + Spark addresses and private keys using the official 
@buildonspark/spark-sdk that produces genuine sp1... addresses.

‚ö†Ô∏è IMPORTANT UPDATE: Use wallet.getSparkAddress(), NOT wallet.getAddress()

================================================================================
‚úÖ WHAT THIS GENERATES (100% REAL) - VERIFIED TEST CASES
================================================================================

üìù TEST CASE 1 (24 words):
SEED: huge gap avoid dentist age dutch attend zero bridge upon amazing ring enforce smile blush cute engage gown marble goose yellow vanish like search
‚ö° SPARK ADDRESS: sp1pgss9y6fyhznnl22juqntfrg0yaylx4meaefe9c2k9trmp4n5hdvhswfat7rca
üíé BITCOIN ADDRESS: bc1puua8p6u26pyakmgaksqt8wst4j2xm8hycpg35qp04l5wxmwlyyfqu639hn
üîë PRIVATE KEY (WIF): Kwh6cWQzG53Wxe8kVSVidh1M2wE94VoMeLSPz1L5YpaP7tC7PDhT

üìù TEST CASE 2 (12 words):
SEED: boost inject evil laptop mirror what shift upon junk better crime uncle
‚ö° SPARK ADDRESS: sp1pgss88jsfr948dtgvvwueyk8l4cev3xaf6qn8hhc724kje44mny6cae8h9s0ml
üíé BITCOIN ADDRESS: bc1pglw7c5vhgecc9q4772ncnzeyaz8e2m0w74a533ulk48ccul724gqaszw8y
üîë PRIVATE KEY (WIF): Kzm6TLRSWCU99JkGLx3ssuMneVhPHiWsDwRywTXZxfAS8LjEWHzy

================================================================================
üîß REQUIRED DEPENDENCIES
================================================================================

{
  "dependencies": {
    "@buildonspark/spark-sdk": "^0.1.41",
    "bip39": "^3.1.0",
    "bip32": "^2.0.6",
    "tiny-secp256k1": "^2.2.3",
    "express": "^5.1.0",
    "cors": "^2.8.5"
  }
}

================================================================================
üìã STEP-BY-STEP PROCESS
================================================================================

Step 1: Import Required Libraries
----------------------------------
const { SparkWallet } = require("@buildonspark/spark-sdk");
const bip39 = require('bip39');
const { BIP32Factory } = require('bip32');
const ecc = require('tiny-secp256k1');

Step 2: Initialize Spark Wallet
--------------------------------
const { wallet, mnemonic } = await SparkWallet.initialize({
    options: {
        network: "MAINNET", // or "TESTNET"
    },
});

Step 3: Generate Bitcoin Deposit Address
-----------------------------------------
const depositAddress = await wallet.getSingleUseDepositAddress();

Step 4: Get Spark Protocol Address
-----------------------------------
let sparkAddress = null;
if (wallet.getSparkAddress) {
    sparkAddress = await wallet.getSparkAddress();
}

Step 5: Extract Private Keys
-----------------------------
const bip32Instance = BIP32Factory(ecc);
const seed = bip39.mnemonicToSeedSync(mnemonic);
const root = bip32Instance.fromSeed(seed);
const child = root.derivePath("m/84'/0'/0'/0/0");

const privateKeys = {
    wif: child.toWIF(),
    hex: Buffer.from(child.privateKey).toString('hex')
};

================================================================================
üöÄ COMPLETE WORKING FUNCTION
================================================================================

async function generateRealSparkWallet() {
    try {
        // 1. Import Spark SDK
        const { SparkWallet } = require("@buildonspark/spark-sdk");
        
        // 2. Initialize wallet
        const { wallet, mnemonic } = await SparkWallet.initialize({
            options: { network: "MAINNET" }
        });
        
        // 3. Get Bitcoin deposit address
        const depositAddress = await wallet.getSingleUseDepositAddress();
        
        // 4. Get Spark address
        let sparkAddress = null;
        if (wallet.getSparkAddress) {
            sparkAddress = await wallet.getSparkAddress();
        }
        
        // 5. Extract private keys
        const bip39 = require('bip39');
        const { BIP32Factory } = require('bip32');
        const ecc = require('tiny-secp256k1');
        
        const bip32Instance = BIP32Factory(ecc);
        const seed = bip39.mnemonicToSeedSync(mnemonic);
        const root = bip32Instance.fromSeed(seed);
        const child = root.derivePath("m/84'/0'/0'/0/0");
        
        const privateKeys = {
            wif: child.toWIF(),
            hex: Buffer.from(child.privateKey).toString('hex')
        };
        
        // 6. Return complete wallet data
        return {
            seedPhrase: mnemonic,
            bitcoinAddress: depositAddress,
            sparkAddress: sparkAddress,
            privateKeys: privateKeys,
            success: true
        };
        
    } catch (error) {
        return {
            error: error.message,
            success: false
        };
    }
}

================================================================================
üåê EXPRESS SERVER IMPLEMENTATION
================================================================================

const express = require('express');
const cors = require('cors');
const app = express();
const PORT = 3001;

app.use(cors());
app.use(express.json());

app.post('/api/generate-spark-wallet', async (req, res) => {
    try {
        const walletData = await generateRealSparkWallet();
        res.json(walletData);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});

================================================================================
üîò HTML BUTTON IMPLEMENTATION
================================================================================

<!-- Add this button to your HTML wallet -->
<button onclick="generateRealSparkWalletForUser()" 
        style="background: #000000; border: 2px solid var(--text-accent); 
               border-radius: 9999px; color: var(--text-accent); 
               font-weight: 600; font-size: 16px; padding: 16px 32px;">
    üöÄ Generate REAL Spark Wallet
</button>

================================================================================
üì± JAVASCRIPT INTEGRATION FOR HTML WALLET
================================================================================

async function generateRealSparkWalletForUser() {
    const btn = event.target;
    const originalText = btn.textContent;
    btn.innerHTML = '<span>üöÄ generating_real_spark_wallet... <span class="blink">‚ñà</span></span>';
    btn.disabled = true;

    try {
        // Call the server API endpoint
        const response = await fetch('/api/generate-spark-wallet', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });

        const walletData = await response.json();

        if (walletData.success) {
            // Update wallet state with real data
            walletState.mnemonic = walletData.seedPhrase;
            walletState.address = walletData.bitcoinAddress;
            walletState.sparkAddress = walletData.sparkAddress;
            walletState.privateKeys = walletData.privateKeys;
            walletState.isInitialized = true;

            // Display the wallet info
            displayRealSparkWalletInfo(
                walletData.seedPhrase,
                walletData.bitcoinAddress,
                walletData.sparkAddress,
                walletData.privateKeys
            );

            showNotification('‚úÖ REAL SPARK WALLET GENERATED!', 'success');
        } else {
            throw new Error(walletData.error || 'Wallet generation failed');
        }
    } catch (error) {
        console.error('‚ùå Real Spark wallet generation failed:', error);
        showNotification(`Failed to generate real Spark wallet: ${error.message}`, 'error');
    } finally {
        btn.innerHTML = originalText;
        btn.disabled = false;
    }
}

================================================================================
‚ö†Ô∏è CRITICAL IMPLEMENTATION NOTES
================================================================================

1. IMPORTANT: Use the Correct Method
   ‚úÖ CORRECT: wallet.getSparkAddress() - Returns real Spark address
   ‚ùå WRONG: wallet.getAddress() - This method doesn't exist in the SDK

2. Real vs Fake Addresses
   ‚úÖ REAL: sp1pgss88jsfr948dtgvvwueyk8l4cev3xaf6qn8hhc724kje44mny6cae8h9s0ml
   ‚ùå FAKE: spark1abc123...@spark.money

3. Address Formats
   - Bitcoin: bc1p... (Taproot) or bc1q... (SegWit)
   - Spark: sp1... (always starts with sp1, 65 characters long)

4. Private Key Extraction
   - Must use BIP84 derivation path: m/84'/0'/0'/0/0
   - WIF format starts with K or L
   - Hex format is 64 characters

5. Error Handling
   - SDK may fail to load in browser
   - BigInt serialization issues when saving to JSON
   - Network connectivity required for Spark SDK

================================================================================
üîí SECURITY CONSIDERATIONS
================================================================================

1. Private Key Handling: Never log or store private keys in plain text
2. Seed Phrase Storage: Warn users to save securely
3. Network Security: Use HTTPS for API calls
4. Client-Side Risk: Consider server-side generation for security

================================================================================
üß™ TESTING THE IMPLEMENTATION
================================================================================

async function testSparkWalletGeneration() {
    const wallet = await generateRealSparkWallet();
    
    console.log('Test Results:');
    console.log('‚úÖ Seed phrase length:', wallet.seedPhrase.split(' ').length);
    console.log('‚úÖ Bitcoin address format:', wallet.bitcoinAddress.startsWith('bc1'));
    console.log('‚úÖ Spark address format:', wallet.sparkAddress.startsWith('sp1'));
    console.log('‚úÖ WIF private key format:', wallet.privateKeys.wif.length);
    console.log('‚úÖ Hex private key format:', wallet.privateKeys.hex.length === 64);
}

================================================================================
üìö COMMAND LINE USAGE
================================================================================

1. Install dependencies:
   npm install @buildonspark/spark-sdk bip39 bip32 tiny-secp256k1 express cors

2. Run the wallet generator:
   node generate-real-spark-wallet.js

3. Start the server:
   node spark-wallet-server.js

4. Test the API:
   curl -X POST http://localhost:3001/api/generate-spark-wallet

================================================================================
üéØ IMPLEMENTATION CHECKLIST
================================================================================

[ ] Install required dependencies
[ ] Create server-side generation function
[ ] Add API endpoint for wallet generation
[ ] Update HTML button to call generation
[ ] Add proper error handling
[ ] Implement security warnings
[ ] Test with real Spark SDK
[ ] Verify address formats (sp1... not spark1...)
[ ] Test API endpoint
[ ] Verify private key extraction
[ ] Test wallet backup functionality

================================================================================
üìã FILES CREATED
================================================================================

1. generate-real-spark-wallet.js - Command line wallet generator
2. spark-wallet-server.js - Express server with API
3. real-spark-wallet-integration.js - HTML wallet integration
4. REAL_SPARK_WALLET_GENERATION_GUIDE.md - Detailed documentation

================================================================================
üîç VERIFICATION STEPS
================================================================================

1. Check seed phrase: 12 words, valid BIP39
2. Check Bitcoin address: Starts with bc1p or bc1q
3. Check Spark address: Starts with sp1 (NOT spark1)
4. Check WIF private key: Starts with K or L
5. Check hex private key: Exactly 64 characters
6. Test API response: Returns success: true
7. Test wallet state: All fields populated correctly

================================================================================
üìû TROUBLESHOOTING
================================================================================

Problem: "Getting wrong Spark address (sp1ymy8j... instead of sp1pgss9y...)"
Solution: Use wallet.getSparkAddress() NOT wallet.getAddress()

Problem: "Cannot find module '@buildonspark/spark-sdk'"
Solution: npm install @buildonspark/spark-sdk

Problem: "BigInt serialization error"
Solution: Convert BigInt to string before JSON.stringify

Problem: "Spark address starts with spark1"
Solution: Use official SDK, not mock generation

Problem: "Bitcoin libraries not loading"
Solution: Check BIP32Factory initialization with ecc

Problem: "Server not responding"
Solution: Check if server is running on correct port

Problem: "Method getAddress() returns undefined"
Solution: The method doesn't exist - use getSparkAddress() instead

================================================================================
üéâ SUCCESS INDICATORS
================================================================================

When everything works correctly, you should see:
‚úÖ Spark SDK imported successfully
‚úÖ Wallet initialized
‚úÖ Bitcoin address generated
‚úÖ Spark address generated (sp1...)
‚úÖ Private keys extracted
‚úÖ API returns success: true
‚úÖ HTML wallet displays real data
‚úÖ All copy buttons work
‚úÖ Backup download works

This ensures you have a fully functional real Spark wallet generator!

================================================================================
END OF GUIDE
================================================================================ 